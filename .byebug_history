exit
@posts[0].count_comment
@posts[0].count_comments
@posts[0]
@posts
exit
@posts
exit
@posts
exit
@list_posts[0].attributes
@list_posts[0].to_s
@list_posts[0].to_h
@list_posts[0]
@list_posts[0].to_hash
@list_posts[0].to_s
@list_posts[0].to_h
@list_posts[0][:count]=2
@list_posts[0]
ps
ps = { **@list_posts[0], count:2}
exit
@count_comments = Comment.select('post_id, COUNT(*) as count').group(:post_id)
pos
exit
@posts.each do |post|
   10:       @post.count_comments = 0
   11:       @count_comments.each do |count_comment|
   12:         @post.count_comments = count_comment.count if post.id == count_comment.post_id
   13:       end end
@posts.each do |post|
   10:       @post.count_comments = 0
   11:       @count_comments.each do |count_comment|
   12:         @post.count_comments = count_comment.count if post.id == count_comment.post_id
   13:       end
@count_comments[0].count
@count_comments[1]
@count_comments
 @count_comments = Comment.select('post_id, COUNT(*) as count').group(:post_id)
exit
@comment.user.username
@comment.user.user_name
@comment
clear
exit
 @like = Like.find_by( like_params )
 @like = Like.find( like_params )
like_params
exit
@like
exit
@like
 @like = Like.find( like_params )
exit
@like
  @like = Like.find( like_params )
Like.find(like_params)
like_params
exit
@like
exit
 Like.find_by( post_id: params, user_id: @current_user.id)
@like
exit
a != false
a == false
a
a.nil?
a =Comment.new(create_params)
Comment.new(create_params)
exit
{ **params.permit(:comment_text, :post_id).to_h , user_id: @current_user.id}
exit
create_params
exit
create_params
exit
create_params
exit
eixt
exit
@post
exit
@post
@update_post
exit
@post.update(update_params)
update_params[:content]
update_params["content"]
update_params["id"]
update_params
@post.update(content: "Chung giac")
@post
@user
exit
pass
 @post = Post.find(213231)
 @post = Post.find?(213231)
 @post = Post.find!(213231)
 @post = Post.find(213231)
 @post = Post.find(2)
exit
Post.create(user_id:9,  content: "asdas")
Post.create(content: "asdas")
Post.create("asdas")
Post.all
a
a.save()
a=  Post.create( content: "asdas" )
Post.create( content: "asdas" )
Post.create(user_id: 9 , content: "asdas" )
@current_user
post.create
post
exit
next
refresh
g.nil?
g
g=nil
@user
@user = User.find(123131)
a
a = User.find(100)
a
a =User.find(1000)
User.find?(1000)
User.find(1000)?
User.find(1000)
a
a = {json: {id: 1}}
json: {id:1}
User.find(9)
decoded[0]['id']
decoded[0][:id]
decoded[0]["id"]
decoded[0]
decoded[0](:id)
decoded[0].id
decoded[0]
decoded[0][:id]
decoded[]
decoded[:id]
decoded
exit
next
exit
JsonWebToken
next
JsonWebToken.decode
exit
 JWT.encode( {id: @user.id, username: @user.username} , 'SECRET_KEY')
SECRET_KEY
exit
JsonWebToken.encode()
JsonWebToken.encode
JsonWebToken
exit
a= JsonWebToken.new
JsonWebToken.encode(id: @user.id, username: @user.username)
exit
load!
reload!
 JsonWebToken.encode(id: @user.id, username: @user.username)
exit
 token = JsonWebToken.encode(id: @user.id, username: @user.username)
login_params["password"]
login_params
login_params[:password]
@user.authenticate("123123")
@user.authenticate?("123123")
@user.authenticate("a123123")
@user.authenticate("123123")
@user.present?
@user
exit
params.permit(:email, :password)
params.permit(:email, :password).email
params.permit(:email, :password)
params.permit(:email)
params
